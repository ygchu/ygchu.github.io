{"meta":{"title":"ygchu的博客","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[],"posts":[{"title":"swift 函数和闭包","slug":"swift-函数和闭包","date":"2020-09-15T12:39:41.000Z","updated":"2020-09-15T13:14:35.602Z","comments":true,"path":"2020/09/15/swift-函数和闭包/","link":"","permalink":"http://example.com/2020/09/15/swift-%E5%87%BD%E6%95%B0%E5%92%8C%E9%97%AD%E5%8C%85/","excerpt":"","text":"函数的定义使用func开始一个函数的定义，使用”-&gt;”隔开函数的参数列表和函数的返回值类型，在函数调用的时候需要加上函数的参数标签（参数标签默认不可以省略：可以提高程序的可读性） 1234func greet(person: String, day: String) -&gt; String &#123; return &quot;Hello \\(person), today is \\(day).&quot;&#125;greet(person: &quot;Bob&quot;, day: &quot;Tuesday&quot;) 补充：如果函数的返回值类型为Void，则”-&gt; Void”可以省略 函数的参数标签默认情况下，函数使用其参数名作为函数的参数的外部标签，可以修改函数参数的外部标签或者省略函数参数的外部标签 12345// 参数person的标签被省略，day的外部标签修改为onfunc greet(_ person: String, on day: String) -&gt; String &#123; return &quot;Hello \\(person), today is \\(day).&quot;&#125;greet(&quot;John&quot;, on: &quot;Wednesday&quot;) 函数的多返回值和元组类型元组类型是swift内置类型，用来表示一组不同类型的变量的集合，使用元组类型可以实现变量的多重赋值和函数的多返回值 1234567891011121314151617181920212223// var a: (Int, Int)，只能通过元组中元素的索引访问// var b: (x: Int, y: Int)，为元组中的元素定义标签，还能通过标签访问func calculateStatistics(scores: [Int]) -&gt; (min: Int, max: Int, sum: Int) &#123; var min = scores[0] var max = scores[0] var sum = 0 for score in scores &#123; if score &gt; max &#123; max = score &#125; else if score &lt; min &#123; min = score &#125; sum += score &#125; return (min, max, sum)&#125;let statistics = calculateStatistics(scores: [5, 3, 100, 3, 9])print(statistics.sum) // 使用标签访问元组的元素// Prints &quot;120&quot;print(statistics.2) // 使用索引访问元组的元素// Prints &quot;120&quot; 内嵌函数和函数类型在swift中，函数也是对象，其类型由函数的参数类型和返回值类型决定 12func add(a: Int, b:Int) -&gt; Int &#123;return a + b&#125;// add的类型为(Int, Int) -&gt; Int 内嵌函数是闭包的雏形，在内嵌函数中能够访问外部函数定义的内容，从而形成闭包 12345678910func returnFifteen() -&gt; Int &#123; var y = 10 // add是内嵌函数，在add中能够访问外部变量y func add() &#123; y += 5 &#125; add() return y&#125;returnFifteen() 匿名函数使用一对使用大括号包裹的代码定义一个匿名函数，使用in分隔参数列表和语句 12345// map需要一个类型为(Int) -&gt; Int的变量numbers.map(&#123; (number: Int) -&gt; Int in let result = 3 * number return result&#125;) 如果匿名函数的类型已经知道，则参数的类型和返回值类型可以省略，因此上面的代码可以简化为 123// 如果函数只有一个参数，则参数的括号可以省略// 如果函数只有一个return语句，则return关键字可以省略numbers.map(&#123;number in 3 * number&#125;) 省略参数名，使用参数的位置直接访问参数，如果函数只有一个匿名函数作为参数，则小括号可以省略，使得匿名函数可以进一步简化 1234// $n表示第n个参数，由于sorted函数只有一个函数类型作为其参数，因此小括号可以省略let sortedNumbers = numbers.sorted &#123; $0 &gt; $1 &#125;print(sortedNumbers)// Prints &quot;[20, 19, 12, 7]&quot;","categories":[],"tags":[{"name":"swift教程","slug":"swift教程","permalink":"http://example.com/tags/swift%E6%95%99%E7%A8%8B/"}]},{"title":"swift 控制流","slug":"swift-控制流","date":"2020-09-15T11:36:22.000Z","updated":"2020-09-15T12:33:19.532Z","comments":true,"path":"2020/09/15/swift-控制流/","link":"","permalink":"http://example.com/2020/09/15/swift-%E6%8E%A7%E5%88%B6%E6%B5%81/","excerpt":"","text":"if语句swift的if语句和其他C风格的编程语言类似，不过if语句的条件表达式的外部括号可以省略（和python类似），使用大括号包裹语句体 123if score &gt; 50 &#123; /*do something*/&#125; 可选类型是一种特殊的类型，该类型的变量要么包含一个数值，要么为nil（在其所包含的类型后面加一个?） 123456789101112131415var optionalString: String? = &quot;Hello&quot;print(optionalString == nil)// Prints &quot;false&quot;var optionalName: String? = &quot;John Appleseed&quot;var greeting = &quot;Hello!&quot;// 如果optionalName不为nil，在取出其解值赋值给nameif let name = optionalName &#123; greeting = &quot;Hello, \\(name)&quot;&#125;// 可选类型和默认值let nickname: String? = nillet fullName: String = &quot;John Appleseed&quot;let informalGreeting = &quot;Hi \\(nickname ?? fullName)&quot; for语句swift的for语句和python的for…in…语句类似，用于遍历可迭代对象，依次取出该的对象的每个元素进行某种处理，在计数循环中，可以结合swift的序列语法使用 123456789101112131415161718192021222324// 类型为[String: [Int]]let interestingNumbers = [ &quot;Prime&quot;: [2, 3, 5, 7, 11, 13], &quot;Fibonacci&quot;: [1, 1, 2, 3, 5, 8], &quot;Square&quot;: [1, 4, 9, 16, 25],]var largest = 0// 外循环遍历字典，内循环遍历数组// 遍历字典的时候组成键值对的形式for (kind, numbers) in interestingNumbers &#123; for number in numbers &#123; if number &gt; largest &#123; largest = number &#125; &#125;&#125;// 计数for循环var total = 0for i in 0..&lt;4 &#123; total += i&#125;print(total)// 使用..&lt;创建左闭右开区间，使用...创建双闭区间 switch语句相比其他C类编程语言，swift的switch语句更加强大，基本上能够代替多个if语句 123456789101112let vegetable = &quot;red pepper&quot;switch vegetable &#123;case &quot;celery&quot;: print(&quot;Add some raisins and make ants on a log.&quot;)case &quot;cucumber&quot;, &quot;watercress&quot;: print(&quot;That would make a good tea sandwich.&quot;)case let x where x.hasSuffix(&quot;pepper&quot;): print(&quot;Is it a spicy \\(x)?&quot;)default: print(&quot;Everything tastes good in soup.&quot;)&#125;// Prints &quot;Is it a spicy red pepper?&quot; while和repeat…while12345678910111213var n = 2while n &lt; 100 &#123; n *= 2&#125;print(n)// Prints &quot;128&quot;var m = 2repeat &#123; m *= 2&#125; while m &lt; 100print(m)// Prints &quot;128&quot;","categories":[],"tags":[{"name":"swift教程","slug":"swift教程","permalink":"http://example.com/tags/swift%E6%95%99%E7%A8%8B/"}]},{"title":"swift 简单变量","slug":"swift-简单变量","date":"2020-09-15T11:16:16.000Z","updated":"2020-09-15T11:35:28.067Z","comments":true,"path":"2020/09/15/swift-简单变量/","link":"","permalink":"http://example.com/2020/09/15/swift-%E7%AE%80%E5%8D%95%E5%8F%98%E9%87%8F/","excerpt":"","text":"hello, world12// swift风格简洁，和python类似print(&quot;hello, world&quot;) swift代码执行过程swift代码的执行过程是从文件的第一行代码开始逐行执行，不需要显式的main函数，并且在每个语句的结尾不需要添加分号 创建变量 使用let创建常量（常量在初始化之后不能改变） 使用var创建变量 语言特点swift是静态类型的语言，即变量一经创建其类型不可更改；同时，swift还是一门强类型的语言，即不存在会发生潜在错误的隐式类型转换 自动类型推导在声明变量的同时对变量进行初始化，则编译器可以通过初始化的值来推断变量的类型，如果声明变量的时候没有进行初始化，则需要显式给出变量的类型 12var value1 = 50 // 编译器可以推导出value的类型为Intvar value2: Int // 声明一个Int类型的变量 变量的类型转换在swift中，可以使用”+”拼接两个字符串，如果需要将一个字符串和其他类型的变量拼接，则需要先将这个类型的变量转换为String类型，然后再进行拼接，swift中的强制类型转换采用和类型同名的函数 1234let label = &quot;The width is &quot;let width = 94let widthLabel = label + String(width)let widthLabel1 = &quot;The width is \\(width)&quot; // 使用字符串插值的方式实现同样的功能（会隐式的将width转换为String类型） 数组和字典使用[]创建数组和字典，通过索引或者键来访问元素 1234567891011121314151617var shoppingList = [&quot;catfish&quot;, &quot;water&quot;, &quot;tulips&quot;] // 数组shoppingList[1] = &quot;bottle of water&quot;var occupations = [ &quot;Malcolm&quot;: &quot;Captain&quot;, &quot;Kaylee&quot;: &quot;Mechanic&quot;,] // 字典occupations[&quot;Jayne&quot;] = &quot;Public Relations&quot;// 创建空数组和空字典// [String]和[String:Float]为数组的类型let emptyArray = [String]()let emptyDictionary = [String: Float]()// 将数组和字典置空shoppingList = []occupations = [:]","categories":[],"tags":[{"name":"swift教程","slug":"swift教程","permalink":"http://example.com/tags/swift%E6%95%99%E7%A8%8B/"}]}],"categories":[],"tags":[{"name":"swift教程","slug":"swift教程","permalink":"http://example.com/tags/swift%E6%95%99%E7%A8%8B/"}]}